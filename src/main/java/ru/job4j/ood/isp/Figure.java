package ru.job4j.ood.isp;

/**
 * Принципы ООД (объектно-ориентированного дизайна)
 * Принцип разделения интерфейсов - Interface Segregation Principle
 *
 * Все шаблоны проектирования были придуманы как раз таким образом, чтобы код не только решал некоторую задачу дизайна,
 * но и соответствовал принципам SOLID. Таким образом,понимание этих принципов делает очевидными шаблоны проектирования.
 *
 * SOLID – это аббревиатура, составленная из первых букв названий принципов:
 * S – Single Responsibility Principle
 * O – Open-Closed Principle
 * L – Liskov Substitution Principle
 * I – Interface Segregation Principle
 * D – Dependency Inversion Principle
 *
 * Роберт Мартин точно высказал суть этого принципа Interface Segregation Principle:
 * "Программные сущности не должны зависеть от методов, которые они не используют."
 *
 * Если добавить много методов в интерфейс, то в реализациях придется их все реализовывать, хотя это не всегда уместно.
 *
 * Пример 1.
 * Есть интерфейс Figure в котором есть 3 метода, расчета периметра, площади и объема.
 * Фигуры могут быть разными одномерными, двумерными и т.д. Когда будет реализован этот интерфейс для двумерной фигуры,
 * то придется глушить метод volume(), потому что для двумерной фигуры не существует объема.
 *
 * Ошибка заключается не в прямом нарушении принципа ISP, а в неверном выделении абстракции,
 * которое в свою очередь ведет к нарушению ISP. В этом случае программные сущности,
 * которые работали бы с фигурами на плоскости, не использовали бы метод volume(), хотя зависели бы от него.
 *
 * Таким образом, выделении абстракции тесно связано с ISP.
 *
 * Вывод:
 * 1. Наличие более 3 методов в интерфейсе может быть признаком нарушения ISP
 * 2. Некорректное выделение абстракций ведет к нарушению всех методов SOLID включая ISP
 * 3. Решение - разделение интерфейсов на более мелкие по логике выполнения методов
 *
 * @author Alex_life
 * @version 1.0
 * @since 03.10.2022
 */
public interface Figure {
    double perimetr();
    double square();
    double volume();
}

/* нарушение ISP можно исправить в данном случае разделив интерфейсы по логике выполнения методов */
interface Figure2D {
    double perimetr();
    double square();
}

interface Figure3D {
    double volume();
}
