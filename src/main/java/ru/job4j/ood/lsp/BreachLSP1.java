package ru.job4j.ood.lsp;

/**
 * Пример нарушения принципа LSP
 * Классический пример проблемы прямоугольника и квадрата
 *
 * Так квадрат — это не прямоугольник?
 * Квадрат — это, конечно, прямоугольник, но вот объект класса Square — это определенно не объект класса Rectangle.
 * Дело в том, что поведение объекта класса Square не согласовано с поведением объекта класса Rectangle.
 * Ведь квадрат ведет себя иначе, чем прямоугольник.
 *
 * Принцип подстановки Лисков наглядно показывает, что в ООП отношение ISA относится именно к поведению.
 * Причем не к внутреннему, а к внешнему поведению, от которого зависят клиенты.
 * Мы всегда должны помнить об этом, когда говорим про моделирование объектов реального мира в парадигме ООП.
 *
 * С этой точки зрения важность написания тестов становится еще более очевидной.
 * Ведь тесты — это тоже клиенты нашей модели, которые позволяют проверить ее правильность с точки зрения предположений,
 * которые могут сделать пользователи. Ведь понять, правильна модель или нет, мы можем только через ее использование.
 *
 * Все зависит от задачи. Не существует единственно верной модели на все случаи жизни.
 * Мы всегда должны отталкиваться от требований к нашему программному обеспечению и той функциональности,
 * которую хотим предоставить.
 *
 * Например, и у квадрата, и у прямоугольника есть периметр и, вероятно, в некоторых частях программы нам нужны
 * его значения независимо от того, с какой фигурой мы работаем.
 * В этом случае легко вынести этот метод в интерфейс Shape и прописать его имплементации в классах Square и Rectangle.
 *
 * Также и у квадрата, и у прямоугольника есть четыре стороны и четыре угла.
 * Возможно, мы захотим получать координаты этих углов в пространстве. Тогда можно вынести интерфейс
 * либо абстрактный класс Quadrangle с соответствующими методами, он также может пригодиться,
 * если мы захотим ввести в свою программу ромбы, параллелограммы, трапеции и прочее. Вариантов великое множество.
 * https:\\habr.com/ru/company/tinkoff/blog/490738/
 *
 * @author Alex_life
 * @version 1.0
 * @since 28.09.2022
 */

class Rectangle {

    public static int height;
    public static int width;

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        Rectangle.width = width;
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        Rectangle.height = height;
    }

    public static int perimeter() {
        return 2 * (height + width);
    }

    public static int area() {
        return height * width;
    }

    public static void testRectangle(Rectangle rect) {
        rect.setHeight(5);
        rect.setWidth(10);
        if (area() != 50) {
            System.out.println("некорректная площадь: " + area());
        } else {
            System.out.println("площадь: " + area());
        }
        if (perimeter() != 30) {
            System.out.println("некорректный периметр: " + perimeter());
        } else {
            System.out.println("периметр: " + perimeter());
        }
    }

    public static void main(String[] args) {
        Rectangle rectangle = new Rectangle();
        testRectangle(rectangle);

        /* поскольку Square является наследником Rectangle-а, то применяем к нему те же методы */
        Square square = new Square();
        testRectangle(square);
        /* Очевидно, что тест testRectangle(square) выдаст сообщение о некорректности,
        так как для Square результат вызова функции perimeter будет не 30, как мы ожидали, а 40 по законам математики.

        И тут мы должны задать себе очень важный вопрос: правильно ли написан тест, в котором предполагается,
        что при изменении длины прямоугольника его ширина не изменяется? Очевидно — да.
        Наш тест наглядно демонстрирует код, который корректно работает с объектом класса Rectangle,
        но ломается при работе с объектами класса Square.

        То есть не для каждого объекта типа Square существует объект типа Rectangle такой,
        что определённая в терминах Rectangle программа (в данном случае тест) не меняется,
        если вместо объекта типа Rectangle подставить объект типа Square.

        Следовательно Square — не подтип Rectangle, следовательно LSP нарушается.*/
    }
}

/**
 * Квадрат — это очевидно прямоугольник. Следовательно, они находятся в отношении ISA.
 * В свою очередь из этого следует то, что класс Square должен быть наследником класса Rectangle.
 * Казалось бы, все логично, однако в наших рассуждениях есть изъян, который может привести к неочевидным,
 * но серьезным проблемам.
 *
 * Классу Square не нужны оба поля height и width, достаточно одного поля, которое можно было просто назвать side,
 * однако же при такой реализации он их унаследует. Помимо того, что это просто приводит к лишней трате памяти на
 * хранение одного ненужного поля (а в случае, если программа генерирует достаточно много объектов данного класса,
 * это может стать серьезной проблемой), оно также приводит к усложнению кода.
 * Дело в том, что класс Square также наследует setWidth и setHeight.
 *
 * Везде, где мы ожидаем увидеть прямоугольник в своем коде, появление квадрата также возможно.
 * И если прямоугольник имеет методы SetWidth и SetHeight, то это что квадрату также нужны эти методы.
 * Но в этом нет никакого смысла. Потому что для квадрата достаточно одной стороны.
 */
class Square extends Rectangle {

    /**
     * Квадрат представляют как частный случай прямоугольника -
     * те же прямые углы, четыре стороны, только ширина обязательно равна высоте.
     * Поэтому в классе Square у setWidth и setHeight устанавливаются сразу и ширина, и высота.
     *
     * Теперь при установке ширины объекта Square будет установлена и его длина. То же самое при установке длины.
     * Таким образом гарантируется целостность инвариантов объектов Square.
     * С математической точки зрения они будут оставаться корректными фигурами.
     *
     * Обычная путаница с этим прямоугольником.
     * Все потому, что забываете о главном принципе ООП — абстракции.
     * Если наши фигуры математические, то они иммутабельные. И да, квадрат это наследник прямоугольника. Без проблем.
     * Как только водятся методы set, то это уже не математические фигуры. Это что-то из реального мира.
     * И тогда "фигня в фирме прямоугольника, которая может менять размеры и пропорции" это
     * не предок "фигни в форме квадрата, которая может менять размеры".
     * Для уточнения иерархии надо понять, что же у нас есть. Модель чего мы строим.
     * По сути весь SOLID это уточнение абстракции
     */
    @Override
    public void setWidth(int width) {
        super.setWidth(width);
        super.setHeight(width);
    }

    @Override
    public void setHeight(int height) {
        super.setHeight(height);
        super.setWidth(height);
    }
}
