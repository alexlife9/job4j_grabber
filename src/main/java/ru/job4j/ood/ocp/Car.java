package ru.job4j.ood.ocp;

/**
 * Пример №1 нарушение OCP
 * методы run в классах PetrolCars и F1 хоть и выполняют схожие функции, но контекст разный между болидом формулы-1
 * и рандомной тачкой на бензине. Поэтому тут лучше применить отдельный интерфейс для ОБЩЕГО описания метода run.
 *
 * Абстрактный класс используется, когда мы хотим получить конкретную реализацию, но она должна гибкой.
 * Интерфейс используется, чтоб реализация этой вещи вообще была.
 *
 *
 * 1. Interface - это контракт системы с внешним окружением. Более Java-специфично:
 * контракт для класса на определенное поведение реализованный в форме напоминающей полностью абстрактный класс.
 * Применять всегда. Это основной способ реализации абстракции.
 *
 * 2. Abstract class - это шаблон для группы классов который не может быть инстанциирован,
 * т.к. не содержит полного описания поведения (может содержать частичное).
 * Применять только в специфических случаях, когда нужно какое-то состояние в абстракции.
 *
 * @author Alex_life
 * @version 1.0
 * @since 25.09.2022
 */
public class Car {
    private static class PetrolCars {
        public void run() {
        }
    }

    private static class F1 extends PetrolCars {
        @Override
        public void run() {
        }
    }
}
